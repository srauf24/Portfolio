{"version":3,"file":"site-apps.js","sourceRoot":"","sources":["../../src/site-apps.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAA;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAE7C,IAAM,MAAM,GAAG,YAAY,CAAC,YAAY,CAAC,CAAA;AAEzC;IAMI,kBAAoB,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;QACjC,iFAAiF;QACjF,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAA;QAC7B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;IAClB,CAAC;IAED,sBAAW,+BAAS;aAApB;YACI,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAA;QAClD,CAAC;;;OAAA;IAEO,iCAAc,GAAtB,UAAuB,UAAkB,EAAE,YAAwC;QAC/E,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,OAAM;QACV,CAAC;QACD,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;QAClD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACtC,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;YACzC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QACjE,CAAC;IACL,CAAC;IAED,sBAAI,oCAAc;aAAlB;;YACI,OAAO,MAAA,MAAA,gBAAgB,CAAC,sBAAsB,0CAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,0CAAE,QAAQ,CAAA;QAC1F,CAAC;;;OAAA;IAED,uBAAI,GAAJ;QAAA,iBASC;QARG,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAM,MAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;YAC1E,IAAI,CAAC,aAAa,GAAG;gBACjB,MAAI,EAAE,CAAA;gBACN,KAAI,CAAC,mBAAmB,GAAG,EAAE,CAAA;gBAC7B,KAAI,CAAC,aAAa,GAAG,SAAS,CAAA;YAClC,CAAC,CAAA;QACL,CAAC;IACL,CAAC;IAED,kCAAe,GAAf,UAAgB,KAAoB;;;QAChC,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;QAChD,CAAC;QACD,IAAM,MAAM,GAA6B,EAAE,CAAA;QAC3C,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;QAC5D,IAAM,eAAe,GAA+B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAA;;YAChH,KAAiC,IAAA,KAAA,SAAA,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA,gBAAA,4BAAE,CAAC;gBAAxD,IAAA,KAAA,mBAAkB,EAAjB,IAAI,QAAA,EAAE,UAAU,QAAA;gBACxB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,UAAU,YAAA,EAAE,CAAA;YAC3D,CAAC;;;;;;;;;QACO,IAAA,SAAS,GAAsB,KAAK,UAA3B,EAAE,IAAI,GAAgB,KAAK,KAArB,EAAK,MAAM,UAAK,KAAK,EAAtC,qBAA8B,CAAF,CAAU;QAC5C,IAAM,OAAO,GAAG;YACZ,KAAK,wBACE,MAAM,KACT,UAAU,iCACH,KAAK,CAAC,UAAU,GAChB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,wBAAO,CAAC,MAAA,MAAA,KAAK,CAAC,UAAU,0CAAE,IAAI,mCAAI,EAAE,CAAC,GAAK,IAAI,CAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GACtE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,wBAAO,CAAC,MAAA,MAAA,KAAK,CAAC,UAAU,0CAAE,SAAS,mCAAI,EAAE,CAAC,GAAK,SAAS,CAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAEjG,cAAc,EAAE,MAAA,MAAA,KAAK,CAAC,UAAU,0CAAG,iBAAiB,CAAC,mCAAI,EAAE;gBAC3D,QAAQ;gBACR,6BAA6B;gBAC7B,0CAA0C;gBAC1C,wCAAwC;gBACxC,6CAA6C;gBAC7C,WAAW,EAAE,MAAA,KAAK,CAAC,UAAU,0CAAG,aAAa,CAAC,GACjD;YACD,MAAM,EAAE;gBACJ,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,2BAA2B,CAAC;aACtE;YACD,MAAM,QAAA;SACT,CAAA;QACD,OAAO,OAAO,CAAA;IAClB,CAAC;IAED,+BAAY,GAAZ,UAAa,MAAqB;QAAlC,iBA4CC;QA3CG,IAAM,GAAG,GAAY;YACjB,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,KAAK;SACjB,CAAA;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,GAAG,CAAA;QAE1B,IAAM,QAAQ,GAAG,UAAC,OAAgB;;;YAC9B,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,OAAO,CAAA;YACvC,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAA;YAElC,MAAM,CAAC,IAAI,CAAC,2BAAoB,MAAM,CAAC,EAAE,cAAI,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAE,CAAC,CAAA;YAE9E,IAAI,OAAO,IAAI,KAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC;gBAC7C,MAAM,CAAC,IAAI,CAAC,qBAAc,KAAI,CAAC,mBAAmB,CAAC,MAAM,0CAAgC,MAAM,CAAC,EAAE,CAAE,CAAC,CAAA;gBACrG,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAC,OAAO,YAAK,OAAA,MAAA,GAAG,CAAC,YAAY,oDAAG,OAAO,CAAC,CAAA,EAAA,CAAC,CAAA;YAC9E,CAAC;;gBAED,KAAkB,IAAA,KAAA,SAAA,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,CAAA,gBAAA,4BAAE,CAAC;oBAAxC,IAAM,KAAG,WAAA;oBACV,IAAI,CAAC,KAAG,CAAC,MAAM,EAAE,CAAC;wBACd,oEAAoE;wBACpE,OAAM;oBACV,CAAC;gBACL,CAAC;;;;;;;;;YAED,MAAA,KAAI,CAAC,aAAa,qDAAI,CAAA;QAC1B,CAAC,CAAA;QAED,IAAI,CAAC;YACO,IAAA,YAAY,GAAK,MAAM,CAAC,IAAI,CAAC;gBACjC,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,QAAQ,EAAE,UAAC,OAAO;oBACd,QAAQ,CAAC,OAAO,CAAC,CAAA;gBACrB,CAAC;aACJ,CAAC,aALkB,CAKlB;YAEF,IAAI,YAAY,EAAE,CAAC;gBACf,GAAG,CAAC,YAAY,GAAG,YAAY,CAAA;YACnC,CAAC;QACL,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,MAAM,CAAC,KAAK,CAAC,8DAAuD,MAAM,CAAC,EAAE,CAAE,EAAE,CAAC,CAAC,CAAA;YACnF,QAAQ,CAAC,KAAK,CAAC,CAAA;QACnB,CAAC;IACL,CAAC;IAEO,kCAAe,GAAvB,UAAwB,KAAoB;;;QACxC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtC,OAAM;QACV,CAAC;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;;YAE3C,KAAkB,IAAA,KAAA,SAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,gBAAA,4BAAE,CAAC;gBAAxC,IAAM,GAAG,WAAA;gBACV,IAAI,CAAC;oBACD,MAAA,GAAG,CAAC,YAAY,oDAAG,OAAO,CAAC,CAAA;gBAC/B,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,MAAM,CAAC,KAAK,CAAC,uCAAgC,KAAK,CAAC,KAAK,2BAAiB,GAAG,CAAC,EAAE,CAAE,EAAE,CAAC,CAAC,CAAA;gBACzF,CAAC;YACL,CAAC;;;;;;;;;IACL,CAAC;IAED,iCAAc,GAAd,UAAe,QAAsB;;QAArC,iBAsCC;;QArCG,IAAI,MAAA,IAAI,CAAC,cAAc,0CAAE,MAAM,EAAE,CAAC;YAC9B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;gBAClB,MAAM,CAAC,KAAK,CAAC,oFAAkF,CAAC,CAAA;gBAChG,OAAM;YACV,CAAC;;gBAED,KAAkB,IAAA,KAAA,SAAA,IAAI,CAAC,cAAc,CAAA,gBAAA,4BAAE,CAAC;oBAAnC,IAAM,GAAG,WAAA;oBACV,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;gBAC1B,CAAC;;;;;;;;;YAED,uFAAuF;YACvF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAA3B,CAA2B,CAAC,CAAA;YAEzE,OAAM;QACV,CAAC;QAED,sJAAsJ;QAEtJ,MAAA,IAAI,CAAC,aAAa,oDAAI,CAAA;QAEtB,IAAI,CAAC,CAAA,MAAA,QAAQ,CAAC,UAAU,CAAC,0CAAE,MAAM,CAAA,EAAE,CAAC;YAChC,OAAM;QACV,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,MAAM,CAAC,KAAK,CAAC,oFAAkF,CAAC,CAAA;YAChG,OAAM;QACV,CAAC;gCAEY,EAAE,EAAE,GAAG;YAChB,gBAAgB,CAAC,0BAAmB,EAAE,CAAE,CAAC,GAAG,OAAK,QAAQ,CAAA;YACzD,MAAA,MAAA,gBAAgB,CAAC,qBAAqB,0CAAE,WAAW,mDAAG,OAAK,QAAQ,EAAE,GAAG,EAAE,UAAC,GAAG;gBAC1E,IAAI,GAAG,EAAE,CAAC;oBACN,OAAO,MAAM,CAAC,KAAK,CAAC,8DAAuD,EAAE,CAAE,EAAE,GAAG,CAAC,CAAA;gBACzF,CAAC;YACL,CAAC,CAAC,CAAA;;;;YANN,KAA0B,IAAA,KAAA,SAAA,QAAQ,CAAC,UAAU,CAAC,CAAA,gBAAA;gBAAnC,IAAA,aAAW,EAAT,EAAE,QAAA,EAAE,GAAG,SAAA;wBAAP,EAAE,EAAE,GAAG;aAOnB;;;;;;;;;IACL,CAAC;IACL,eAAC;AAAD,CAAC,AAlLD,IAkLC","sourcesContent":["import { PostHog } from './posthog-core'\nimport { CaptureResult, Properties, RemoteConfig, SiteApp, SiteAppGlobals, SiteAppLoader } from './types'\nimport { assignableWindow } from './utils/globals'\nimport { createLogger } from './utils/logger'\n\nconst logger = createLogger('[SiteApps]')\n\nexport class SiteApps {\n    apps: Record<string, SiteApp>\n\n    private stopBuffering?: () => void\n    private bufferedInvocations: SiteAppGlobals[]\n\n    constructor(private instance: PostHog) {\n        // events captured between loading posthog-js and the site app; up to 1000 events\n        this.bufferedInvocations = []\n        this.apps = {}\n    }\n\n    public get isEnabled(): boolean {\n        return !!this.instance.config.opt_in_site_apps\n    }\n\n    private eventCollector(_eventName: string, eventPayload?: CaptureResult | undefined) {\n        if (!eventPayload) {\n            return\n        }\n        const globals = this.globalsForEvent(eventPayload)\n        this.bufferedInvocations.push(globals)\n        if (this.bufferedInvocations.length > 1000) {\n            this.bufferedInvocations = this.bufferedInvocations.slice(10)\n        }\n    }\n\n    get siteAppLoaders(): SiteAppLoader[] | undefined {\n        return assignableWindow._POSTHOG_REMOTE_CONFIG?.[this.instance.config.token]?.siteApps\n    }\n\n    init() {\n        if (this.isEnabled) {\n            const stop = this.instance._addCaptureHook(this.eventCollector.bind(this))\n            this.stopBuffering = () => {\n                stop()\n                this.bufferedInvocations = []\n                this.stopBuffering = undefined\n            }\n        }\n    }\n\n    globalsForEvent(event: CaptureResult): SiteAppGlobals {\n        if (!event) {\n            throw new Error('Event payload is required')\n        }\n        const groups: SiteAppGlobals['groups'] = {}\n        const groupIds = this.instance.get_property('$groups') || []\n        const groupProperties: Record<string, Properties> = this.instance.get_property('$stored_group_properties') || {}\n        for (const [type, properties] of Object.entries(groupProperties)) {\n            groups[type] = { id: groupIds[type], type, properties }\n        }\n        const { $set_once, $set, ..._event } = event\n        const globals = {\n            event: {\n                ..._event,\n                properties: {\n                    ...event.properties,\n                    ...($set ? { $set: { ...(event.properties?.$set ?? {}), ...$set } } : {}),\n                    ...($set_once ? { $set_once: { ...(event.properties?.$set_once ?? {}), ...$set_once } } : {}),\n                },\n                elements_chain: event.properties?.['$elements_chain'] ?? '',\n                // TODO:\n                // - elements_chain_href: '',\n                // - elements_chain_texts: [] as string[],\n                // - elements_chain_ids: [] as string[],\n                // - elements_chain_elements: [] as string[],\n                distinct_id: event.properties?.['distinct_id'],\n            },\n            person: {\n                properties: this.instance.get_property('$stored_person_properties'),\n            },\n            groups,\n        }\n        return globals\n    }\n\n    setupSiteApp(loader: SiteAppLoader) {\n        const app: SiteApp = {\n            id: loader.id,\n            loaded: false,\n            errored: false,\n        }\n        this.apps[loader.id] = app\n\n        const onLoaded = (success: boolean) => {\n            this.apps[loader.id].errored = !success\n            this.apps[loader.id].loaded = true\n\n            logger.info(`Site app with id ${loader.id} ${success ? 'loaded' : 'errored'}`)\n\n            if (success && this.bufferedInvocations.length) {\n                logger.info(`Processing ${this.bufferedInvocations.length} events for site app with id ${loader.id}`)\n                this.bufferedInvocations.forEach((globals) => app.processEvent?.(globals))\n            }\n\n            for (const app of Object.values(this.apps)) {\n                if (!app.loaded) {\n                    // If any other apps are not loaded, we don't want to stop buffering\n                    return\n                }\n            }\n\n            this.stopBuffering?.()\n        }\n\n        try {\n            const { processEvent } = loader.init({\n                posthog: this.instance,\n                callback: (success) => {\n                    onLoaded(success)\n                },\n            })\n\n            if (processEvent) {\n                app.processEvent = processEvent\n            }\n        } catch (e) {\n            logger.error(`Error while initializing PostHog app with config id ${loader.id}`, e)\n            onLoaded(false)\n        }\n    }\n\n    private onCapturedEvent(event: CaptureResult) {\n        if (Object.keys(this.apps).length === 0) {\n            return\n        }\n\n        const globals = this.globalsForEvent(event)\n\n        for (const app of Object.values(this.apps)) {\n            try {\n                app.processEvent?.(globals)\n            } catch (e) {\n                logger.error(`Error while processing event ${event.event} for site app ${app.id}`, e)\n            }\n        }\n    }\n\n    onRemoteConfig(response: RemoteConfig): void {\n        if (this.siteAppLoaders?.length) {\n            if (!this.isEnabled) {\n                logger.error(`PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.`)\n                return\n            }\n\n            for (const app of this.siteAppLoaders) {\n                this.setupSiteApp(app)\n            }\n\n            // NOTE: We could improve this to only fire if we actually have listeners for the event\n            this.instance.on('eventCaptured', (event) => this.onCapturedEvent(event))\n\n            return\n        }\n\n        // NOTE: Below his is now only the fallback for legacy site app support. Once we have fully removed to the remote config loader we can get rid of this\n\n        this.stopBuffering?.()\n\n        if (!response['siteApps']?.length) {\n            return\n        }\n\n        if (!this.isEnabled) {\n            logger.error(`PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.`)\n            return\n        }\n\n        for (const { id, url } of response['siteApps']) {\n            assignableWindow[`__$$ph_site_app_${id}`] = this.instance\n            assignableWindow.__PosthogExtensions__?.loadSiteApp?.(this.instance, url, (err) => {\n                if (err) {\n                    return logger.error(`Error while initializing PostHog app with config id ${id}`, err)\n                }\n            })\n        }\n    }\n}\n"]}